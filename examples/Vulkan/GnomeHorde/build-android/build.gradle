// Applies the Android plugin for Gradle to this build and makes the android block available to specify Android-specific build options
apply plugin: 'com.android.application'

def hasSigningDefined = project.hasProperty('KEYSTORE_FILE') &&  project.hasProperty('KEYSTORE_PASSWORD') &&  project.hasProperty('KEY_ALIAS') && project.hasProperty('KEY_PASSWORD')
// Get the output directory based on if the gradle command was kicked for the entire SDK or the example only
def binOutput = gradle.ext.PVR_BINARY_OUTPUT_DIR
// The set of framework projects on which this application is dependent
def projectDependencies = ["PVRShell", "PVRUtilsVk"]

// This block configures the repositories and dependencies for Gradle itself. Here we add a dependency for the Android plugin for Gradle as it provides
// the additional instructions Gradle needs to build Android app modules
buildscript {
	repositories {
		google()
		jcenter()
	}

	// Adds the Android plugin for Gradle as a classpath dependency
	dependencies {
		classpath 'com.android.tools.build:gradle:4.0.1'
	}
}

// This block configures the repositories and dependencies used by all modules in the project
allprojects {
	repositories {
		google()
		jcenter()
	}
}

android {
	compileSdkVersion 29
	ndkVersion "26.2.11394342"
	defaultConfig {
		applicationId "com.powervr.VulkanGnomeHorde"
		minSdkVersion 21
		targetSdkVersion 29
		externalNativeBuild {
			cmake {
				cppFlags "-fexceptions"
				arguments "-DANDROID_STL=c++_static", "-DPVR_PREBUILT_DEPENDENCIES=ON", "-DPVR_ENABLE_INSTALL=ON"
			}
		}
		ndk
		{
			abiFilters "$ANDROID_ABI".replace(" ", "").split(",")
		}
	}
	
	if (!project.hasProperty('NOSIGN') && hasSigningDefined) {
		signingConfigs {
			release {
				storeFile file(project['KEYSTORE_FILE'])
				storePassword project['KEYSTORE_PASSWORD']
				keyAlias project['KEY_ALIAS']
				keyPassword project['KEY_PASSWORD']
			}
		}
	}

	// This block configures our build types
	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
			zipAlignEnabled true
			if (!project.hasProperty('NOSIGN') && hasSigningDefined) {
				signingConfig signingConfigs.release
			}
		}
		debug {
			sourceSets {
				main {
					jniLibs {
						// We are providing prebuilt validation layer libraries built using the LunarG Vulkan-LoaderAndValidationLayers github repo: https://github.com/KhronosGroup/Vulkan-LoaderAndValidationLayers.git
						// We found that the latest set provided in the ndk were quite out of date (using VK_HEADER_VERSION 31) and were outputting false positive validation layer errors in certain cases.
						// The following makes use of our provided validation layer libraries:
						srcDir "${project.projectDir}/../../../../external/validation_layers/jniLibs"
						
						// The following will instead make use of the prebuilt validation layer libraries provided in the ndk:
						//def ndkDir = android.ndkDirectory
						//srcDir "$ndkDir/sources/third_party/vulkan/src/build-android/jniLibs"
					}
				}
			}
		}
	}
	externalNativeBuild {
		cmake {
			path "../CMakeLists.txt"
			version "3.10.2"
		}
	}

	// Ensure that the icons are copied early - we do this by making the preBuild task depends on the copyIcons task
	task copyIcons(type: Copy) {
		from file("${project.projectDir}/../../../../res/Android/Vulkan")
		into sourceSets.main.res.srcDirs[0]
		fileMode = 0664
	}
	preBuild.dependsOn copyIcons

	// Add to this list files that will need to be read at runtime here: Textures, shaders, text files etc.
	FileCollection assetFiles = files(
	"${project.projectDir}/../../../assets/GnomeHorde/bigMushroom0.pod",
	"${project.projectDir}/../../../assets/GnomeHorde/bigMushroom_shadow0.pod",
	"${project.projectDir}/../../../assets/GnomeHorde/fern0.pod",
	"${project.projectDir}/../../../assets/GnomeHorde/fern_shadow0.pod",
	"${project.projectDir}/../../../assets/GnomeHorde/gnome0.pod",
	"${project.projectDir}/../../../assets/GnomeHorde/gnome1.pod",
	"${project.projectDir}/../../../assets/GnomeHorde/gnome2.pod",
	"${project.projectDir}/../../../assets/GnomeHorde/gnome3.pod",
	"${project.projectDir}/../../../assets/GnomeHorde/gnome4.pod",
	"${project.projectDir}/../../../assets/GnomeHorde/gnome5.pod",
	"${project.projectDir}/../../../assets/GnomeHorde/gnome6.pod",
	"${project.projectDir}/../../../assets/GnomeHorde/gnome_shadow0.pod",
	"${project.projectDir}/../../../assets/GnomeHorde/mushroom0.pod",
	"${project.projectDir}/../../../assets/GnomeHorde/mushroom1.pod",
	"${project.projectDir}/../../../assets/GnomeHorde/mushroom_shadow0.pod",
	"${project.projectDir}/../../../assets/GnomeHorde/rocks0.pod",
	"${project.projectDir}/../../../assets/GnomeHorde/bigMushroom_shadow.pvr",
	"${project.projectDir}/../../../assets/GnomeHorde/bigMushroom_shadow_astc.pvr",
	"${project.projectDir}/../../../assets/GnomeHorde/bigMushroom_texture.pvr",
	"${project.projectDir}/../../../assets/GnomeHorde/bigMushroom_texture_astc.pvr",
	"${project.projectDir}/../../../assets/GnomeHorde/fern.pvr",
	"${project.projectDir}/../../../assets/GnomeHorde/fern_astc.pvr",
	"${project.projectDir}/../../../assets/GnomeHorde/fern_shadow.pvr",
	"${project.projectDir}/../../../assets/GnomeHorde/fern_shadow_astc.pvr",
	"${project.projectDir}/../../../assets/GnomeHorde/gnome_shadow.pvr",
	"${project.projectDir}/../../../assets/GnomeHorde/gnome_shadow_astc.pvr",
	"${project.projectDir}/../../../assets/GnomeHorde/gnome_texture.pvr",
	"${project.projectDir}/../../../assets/GnomeHorde/gnome_texture_astc.pvr",
	"${project.projectDir}/../../../assets/GnomeHorde/mushroom_shadow.pvr",
	"${project.projectDir}/../../../assets/GnomeHorde/mushroom_shadow_astc.pvr",
	"${project.projectDir}/../../../assets/GnomeHorde/mushroom_texture.pvr",
	"${project.projectDir}/../../../assets/GnomeHorde/mushroom_texture_astc.pvr",
	"${project.projectDir}/../../../assets/GnomeHorde/rocks.pvr",
	"${project.projectDir}/../../../assets/GnomeHorde/rocks_astc.pvr",
	"${project.projectDir}/../Object.vsh.spv",
	"${project.projectDir}/../Shadow.vsh.spv",
	"${project.projectDir}/../Solid.fsh.spv",
	"${project.projectDir}/../Shadow.fsh.spv",
	"${project.projectDir}/../Plant.fsh.spv",
	)
	
	// Add a task for copying our assets from their original location (${project.projectDir}...) to the assets/ folder for packaging
	task copyAssetsDebug(type: Copy) {
		from assetFiles
		into sourceSets.main.assets.srcDirs[0]
		fileMode = 0664
	}
	
	task copyAssetsRelease(type: Copy) {
		from assetFiles
		into sourceSets.main.assets.srcDirs[0]
		fileMode = 0664
	}
}

// This block specifies dependencies required to build only the module itself
dependencies {
	// Dependency on local binaries
	implementation fileTree(dir: 'libs', include: ['*.jar'])
}

// For release builds ensure that signing has taken place appropriately
task checkReleaseSigning() {
	doLast{
		if (!hasSigningDefined && !project.hasProperty('NOSIGN')) {
			throw new InvalidUserDataException("*** ERROR *** No signing parameters and no 'NOSIGN' parameter for *Release* build *** ERROR ***\n"+
	"You must pass the parameters 'KEYSTORE_FILE', 'KEYSTORE_PASSWORD', 'KEY_ALIAS' and 'KEY_PASSWORD', or 'NOSIGN'.\n"+
	"These parameters can be passed several ways:\n" +
	" - Via command line ('-PRELEASE_STORE_FILE=myfile.jks....'), \n" +
	" - Defined locally in the build.gradle or settings.gradle (ext['KEYSTORE_FILE'] ='myfile.jks'. \n"+
	" - Defined globally in a gradle.properties file (ensure you have the GRADLE_USER_HOME variable set) : (KEYSTORE_FILE=myfile.jks etc.).\n"+
	'Otherwise, execute a *Debug* build, or pass the parameter NOSIGN. Otherwise, hardcode or disable signing completely by changing/removing the \'signingConfigs\' section and the line \'signingConfig signingConfigs.release\' from the \'buildTypes { release { ... } }\' section.');
		}
	}
}

//Copy outputs to the bin/ folder
task copyToBinDebug(type: Copy) {
	from 'build/outputs/apk/debug'
	into "${binOutput}"
	include('*.apk')
}
// Copy outputs to the bin/ folder and remove the "-release" suffix
task copyToBinRelease(type: Copy) {
	from 'build/outputs/apk/release'
	into "${binOutput}"
	include('*.apk')
	rename('(.*)-release.apk', '$1.apk')
}

tasks.whenTaskAdded { task ->
	// We add a dependency on all projects dependencies corresponding externalNativeBuild tasks - If these lines are removed, the dependencies are not built as they should be.
	if (task.name.startsWith('generateJsonModel')) {
		def flavor = task.name.substring('generateJsonModel'.length())
		projectDependencies.each {s -> task.dependsOn ":${s}:externalNativeBuild${flavor}" }
	}

	// Ensure the assets folder is appropriately copied to the apk
	if (task.name == 'externalNativeBuildRelease') {
		copyAssetsRelease.dependsOn task
	}
	if (task.name == 'externalNativeBuildDebug') {
		copyAssetsDebug.dependsOn task
	}
	
	if (task.name == 'mergeReleaseAssets')
	{
		task.dependsOn copyAssetsRelease
	}
	
	if (task.name == 'mergeDebugAssets') {
		task.dependsOn copyAssetsDebug
	}

	// Copy the binary to the final bin folder.
	if (task.name == 'packageRelease') {
		task.dependsOn(checkReleaseSigning)
		task.finalizedBy copyToBinRelease
	}
	if (task.name == 'packageDebug') {
		task.finalizedBy copyToBinDebug
	}
}